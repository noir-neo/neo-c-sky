using System;
using System.IO;
using System.Linq;
using System.Text;
using ModestTree;
using UnityEditor;
using UnityEngine.SceneManagement;

public class LevelSceneBuildUpdater : AssetPostprocessor
{
    private static readonly string LevelDirectoryPath = "Assets/Scenes/Level";
    private static readonly string LevelBuildIndexClassPath = "Assets/Scripts/Generated/LevelLoader.cs";

    static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
    {
        var changedAssets = importedAssets.Union(deletedAssets).Union(movedAssets).Union(movedFromAssetPaths);
        var changedAssetDirectoryNames = changedAssets.Select(Path.GetDirectoryName);
        if (changedAssetDirectoryNames.Any(n => n == LevelDirectoryPath))
        {
            UpdateScenesInBuild();
            UpdateSceneBuildIndex();
        }
    }

    private static void UpdateScenesInBuild()
    {
        EditorBuildSettings.scenes = EditorBuildSettings.scenes
            .Where(s => !s.path.Contains(LevelDirectoryPath))
            .Concat(
                AssetDatabase.FindAssets("t:Scene")
                    .Select(AssetDatabase.GUIDToAssetPath)
                    .Where(path => path.Contains(LevelDirectoryPath))
                    .Select(path => new EditorBuildSettingsScene(path, true))
                )
                .ToArray();
    }

    private static void UpdateSceneBuildIndex()
    {
        var builder = new StringBuilder();

        builder.AppendLine("// Generated by LevelSceneBuildUpdater");

        builder.AppendLine("using System.Collections.Generic;");

        builder.AppendFormat("public static partial class {0}", Path.GetFileNameWithoutExtension(LevelBuildIndexClassPath)).AppendLine();
        builder.AppendLine("{");
        builder.AppendLine("\tpublic static readonly Dictionary<int, int> levelSceneBuildIndex = new Dictionary<int, int>");
        builder.AppendLine("\t{");

        EditorBuildSettings.scenes
            .Select(s => s.path)
            .Where(p => p.Contains(LevelDirectoryPath))
            .ForEach(p =>
            {
                builder.Append("\t\t").AppendFormat("{{ {0}, {1} }},",
                    Convert.ToInt32(Path.GetFileNameWithoutExtension(p).Split('_')[1]),
                    SceneUtility.GetBuildIndexByScenePath(p)
                    ).AppendLine();
            });

        builder.AppendLine("\t};");
        builder.AppendLine("}");

        ScriptGenerator.CreateScript(LevelBuildIndexClassPath, builder.ToString());
    }

}


